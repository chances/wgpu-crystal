# AUTOGENERATED: DO NOT EDIT!
#
# Upgrade instructions:
# 1. `rm src/lib-wgpu.cr vendor/webgpu.h vendor/wgpu.h && make src/lib-wgpu.cr`
# 2. Use `UInt32` for interop enums because rust enums are tagged unions:
#   `enum WGPU([A-Za-z]+) : (UInt)?` => `enum $1 : UInt32`
# 3. Make these replacements, in order:
#   a. `struct WGPU([A-Za-z]+)$` => `struct $1`
#   b. `alias WGPU([A-Za-z]+) = WGPU[A-Za-z]+Impl*$` => `alias $1 = Void*`
#   c. `-> WGPU([A-Za-z]+)Impl\*$` => `-> $1`
#   d. `alias WGPU([A-Za-z]+) =` => `alias $1 =`
#   e. `type WGPU([A-Za-z]+) =` => `type $1 =`
#   f. `^(\s+)([0-9])D` => `$1 D$2`
#   g. `([:,]) Float\b` => `$1 Float32`
#   h. `: Double\b` => `: Float64`
#   i. `Uint32T` => `UInt32`
#   j. `SizeT` => `UInt32`
# 3. Replace `WGPU([A-Za-z]+)` for `$1`, with special care.
# 4. Replace `fun = wgpu([A-Za-z]+)` for `fun $1.snake_case = wgpu$1` manually
# 5. Remove `ProcGetProcAddress` alias and ensure `wgpuGetProcAddress` returns `Proc(Void*)`

# `Proc` is an extant identifier in the Crystal standard library. Thus,
@[Link(ldflags: "-L#{__DIR__}/../bin/libs -lwgpu_native")]
lib LibWGPU
  # webgpu.h
  # WGPU_EXPORT =
  # WGPU_WHOLE_SIZE = (ULongLong.new(0xffffffffffffffff))
  # WGPU_COPY_STRIDE_UNDEFINED = (ULong.new(0xffffffff))
  alias Flags = UInt32
  alias Adapter = Void*
  alias BindGroup = Void*
  alias BindGroupLayout = Void*
  alias Buffer = Void*
  alias CommandBuffer = Void*
  alias CommandEncoder = Void*
  alias ComputePassEncoder = Void*
  alias ComputePipeline = Void*
  alias Device = Void*
  alias Instance = Void*
  alias PipelineLayout = Void*
  alias QuerySet = Void*
  alias Queue = Void*
  alias RenderBundle = Void*
  alias RenderBundleEncoder = Void*
  alias RenderPassEncoder = Void*
  alias RenderPipeline = Void*
  alias Sampler = Void*
  alias ShaderModule = Void*
  alias Surface = Void*
  alias SwapChain = Void*
  alias Texture = Void*
  alias TextureView = Void*
  enum AdapterType : UInt32
    DiscreteGPU = 0
    IntegratedGPU = 1
    CPU = 2
    Unknown = 3
    Force32 = 2147483647
  end
  enum AddressMode : UInt32
    Repeat = 0
    MirrorRepeat = 1
    ClampToEdge = 2
    Force32 = 2147483647
  end
  enum BackendType : UInt32
    Null = 0
    D3D11 = 1
    D3D12 = 2
    Metal = 3
    Vulkan = 4
    OpenGL = 5
    OpenGLES = 6
    Force32 = 2147483647
  end
  enum BlendFactor : UInt32
    Zero = 0
    One = 1
    SrcColor = 2
    OneMinusSrcColor = 3
    SrcAlpha = 4
    OneMinusSrcAlpha = 5
    DstColor = 6
    OneMinusDstColor = 7
    DstAlpha = 8
    OneMinusDstAlpha = 9
    SrcAlphaSaturated = 10
    BlendColor = 11
    OneMinusBlendColor = 12
    Force32 = 2147483647
  end
  enum BlendOperation : UInt32
    Add = 0
    Subtract = 1
    ReverseSubtract = 2
    Min = 3
    Max = 4
    Force32 = 2147483647
  end
  enum BufferBindingType : UInt32
    Undefined = 0
    Uniform = 1
    Storage = 2
    ReadOnlyStorage = 3
    Force32 = 2147483647
  end
  enum BufferMapAsyncStatus : UInt32
    Success = 0
    Error = 1
    Unknown = 2
    DeviceLost = 3
    DestroyedBeforeCallback = 4
    UnmappedBeforeCallback = 5
    Force32 = 2147483647
  end
  enum CompareFunction : UInt32
    Undefined = 0
    Never = 1
    Less = 2
    LessEqual = 3
    Greater = 4
    GreaterEqual = 5
    Equal = 6
    NotEqual = 7
    Always = 8
    Force32 = 2147483647
  end
  enum CreatePipelineAsyncStatus : UInt32
    Success = 0
    Error = 1
    DeviceLost = 2
    DeviceDestroyed = 3
    Unknown = 4
    Force32 = 2147483647
  end
  enum CullMode : UInt32
    None = 0
    Front = 1
    Back = 2
    Force32 = 2147483647
  end
  enum ErrorFilter : UInt32
    None = 0
    Validation = 1
    OutOfMemory = 2
    Force32 = 2147483647
  end
  enum ErrorType : UInt32
    NoError = 0
    Validation = 1
    OutOfMemory = 2
    Unknown = 3
    DeviceLost = 4
    Force32 = 2147483647
  end
  enum FilterMode : UInt32
    Nearest = 0
    Linear = 1
    Force32 = 2147483647
  end
  enum FrontFace : UInt32
    CCW = 0
    CW = 1
    Force32 = 2147483647
  end
  enum IndexFormat : UInt32
    Undefined = 0
    Uint16 = 1
    Uint32 = 2
    Force32 = 2147483647
  end
  enum InputStepMode : UInt32
    Vertex = 0
    Instance = 1
    Force32 = 2147483647
  end
  enum LoadOp : UInt32
    Clear = 0
    Load = 1
    Force32 = 2147483647
  end
  enum PipelineStatisticName : UInt32
    VertexShaderInvocations = 0
    ClipperInvocations = 1
    ClipperPrimitivesOut = 2
    FragmentShaderInvocations = 3
    ComputeShaderInvocations = 4
    Force32 = 2147483647
  end
  enum PresentMode : UInt32
    Immediate = 0
    Mailbox = 1
    Fifo = 2
    Force32 = 2147483647
  end
  enum PrimitiveTopology : UInt32
    PointList = 0
    LineList = 1
    LineStrip = 2
    TriangleList = 3
    TriangleStrip = 4
    Force32 = 2147483647
  end
  enum QueryType : UInt32
    Occlusion = 0
    PipelineStatistics = 1
    Timestamp = 2
    Force32 = 2147483647
  end
  enum QueueWorkDoneStatus : UInt32
    Success = 0
    Error = 1
    Unknown = 2
    DeviceLost = 3
    Force32 = 2147483647
  end
  enum SType : UInt32
    Invalid = 0
    SurfaceDescriptorFromMetalLayer = 1
    SurfaceDescriptorFromWindowsHWND = 2
    SurfaceDescriptorFromXlib = 3
    SurfaceDescriptorFromCanvasHTMLSelector = 4
    ShaderModuleSPIRVDescriptor = 5
    ShaderModuleWGSLDescriptor = 6
    Force32 = 2147483647
  end
  enum SamplerBindingType : UInt32
    Undefined = 0
    Filtering = 1
    NonFiltering = 2
    Comparison = 3
    Force32 = 2147483647
  end
  enum StencilOperation : UInt32
    Keep = 0
    Zero = 1
    Replace = 2
    Invert = 3
    IncrementClamp = 4
    DecrementClamp = 5
    IncrementWrap = 6
    DecrementWrap = 7
    Force32 = 2147483647
  end
  enum StorageTextureAccess : UInt32
    Undefined = 0
    ReadOnly = 1
    WriteOnly = 2
    Force32 = 2147483647
  end
  enum StoreOp : UInt32
    Store = 0
    Clear = 1
    Force32 = 2147483647
  end
  enum TextureAspect : UInt32
    All = 0
    StencilOnly = 1
    DepthOnly = 2
    Force32 = 2147483647
  end
  enum TextureComponentType : UInt32
    Float = 0
    Sint = 1
    Uint = 2
    DepthComparison = 3
    Force32 = 2147483647
  end
  enum TextureDimension : UInt32
    D1 = 0
    D2 = 1
    D3 = 2
    Force32 = 2147483647
  end
  enum TextureFormat : UInt32
    Undefined = 0
    R8Unorm = 1
    R8Snorm = 2
    R8Uint = 3
    R8Sint = 4
    R16Uint = 5
    R16Sint = 6
    R16Float = 7
    RG8Unorm = 8
    RG8Snorm = 9
    RG8Uint = 10
    RG8Sint = 11
    R32Float = 12
    R32Uint = 13
    R32Sint = 14
    RG16Uint = 15
    RG16Sint = 16
    RG16Float = 17
    RGBA8Unorm = 18
    RGBA8UnormSrgb = 19
    RGBA8Snorm = 20
    RGBA8Uint = 21
    RGBA8Sint = 22
    BGRA8Unorm = 23
    BGRA8UnormSrgb = 24
    RGB10A2Unorm = 25
    RG11B10Ufloat = 26
    RGB9E5Ufloat = 27
    RG32Float = 28
    RG32Uint = 29
    RG32Sint = 30
    RGBA16Uint = 31
    RGBA16Sint = 32
    RGBA16Float = 33
    RGBA32Float = 34
    RGBA32Uint = 35
    RGBA32Sint = 36
    Depth32Float = 37
    Depth24Plus = 38
    Depth24PlusStencil8 = 39
    Stencil8 = 40
    BC1RGBAUnorm = 41
    BC1RGBAUnormSrgb = 42
    BC2RGBAUnorm = 43
    BC2RGBAUnormSrgb = 44
    BC3RGBAUnorm = 45
    BC3RGBAUnormSrgb = 46
    BC4RUnorm = 47
    BC4RSnorm = 48
    BC5RGUnorm = 49
    BC5RGSnorm = 50
    BC6HRGBUfloat = 51
    BC6HRGBFloat = 52
    BC7RGBAUnorm = 53
    BC7RGBAUnormSrgb = 54
    Force32 = 2147483647
  end
  enum TextureSampleType : UInt32
    Undefined = 0
    Float = 1
    UnfilterableFloat = 2
    Depth = 3
    Sint = 4
    Uint = 5
    Force32 = 2147483647
  end
  enum TextureViewDimension : UInt32
    Undefined = 0
    D1 = 1
    D2 = 2
    D2Array = 3
    Cube = 4
    CubeArray = 5
    D3 = 6
    Force32 = 2147483647
  end
  enum VertexFormat : UInt32
    Undefined = 0
    Uint8x2 = 1
    Uint8x4 = 2
    Sint8x2 = 3
    Sint8x4 = 4
    Unorm8x2 = 5
    Unorm8x4 = 6
    Snorm8x2 = 7
    Snorm8x4 = 8
    Uint16x2 = 9
    Uint16x4 = 10
    Sint16x2 = 11
    Sint16x4 = 12
    Unorm16x2 = 13
    Unorm16x4 = 14
    Snorm16x2 = 15
    Snorm16x4 = 16
    Float16x2 = 17
    Float16x4 = 18
    Float32 = 19
    Float32x2 = 20
    Float32x3 = 21
    Float32x4 = 22
    Uint32 = 23
    Uint32x2 = 24
    Uint32x3 = 25
    Uint32x4 = 26
    Sint32 = 27
    Sint32x2 = 28
    Sint32x3 = 29
    Sint32x4 = 30
    Force32 = 2147483647
  end
  enum BufferUsage : UInt32
    None = 0
    MapRead = 1
    MapWrite = 2
    CopySrc = 4
    CopyDst = 8
    Index = 16
    Vertex = 32
    Uniform = 64
    Storage = 128
    Indirect = 256
    QueryResolve = 512
    Force32 = 2147483647
  end
  alias BufferUsageFlags = Flags
  enum ColorWriteMask : UInt32
    None = 0
    Red = 1
    Green = 2
    Blue = 4
    Alpha = 8
    All = 15
    Force32 = 2147483647
  end
  alias ColorWriteMaskFlags = Flags
  enum MapMode : UInt32
    Read = 1
    Write = 2
    Force32 = 2147483647
  end
  alias MapModeFlags = Flags
  enum ShaderStage : UInt32
    None = 0
    Vertex = 1
    Fragment = 2
    Compute = 4
    Force32 = 2147483647
  end
  alias ShaderStageFlags = Flags
  enum TextureUsage : UInt32
    None = 0
    CopySrc = 1
    CopyDst = 2
    Sampled = 4
    Storage = 8
    RenderAttachment = 16
    Force32 = 2147483647
  end
  alias TextureUsageFlags = Flags
  struct ChainedStruct
    next : ChainedStruct*
    s_type : SType
  end
  struct AdapterProperties
    next_in_chain : ChainedStruct*
    device_id : UInt32
    vendor_id : UInt32
    name : UInt8*
    driver_description : UInt8*
    adapter_type : AdapterType
    backend_type : BackendType
  end
  struct BindGroupEntry
    binding : UInt32
    buffer : Buffer
    offset : UInt64
    size : UInt64
    sampler : Sampler
    texture_view : TextureView
  end
  struct BlendComponent
    src_factor : BlendFactor
    dst_factor : BlendFactor
    operation : BlendOperation
  end
  struct BufferBindingLayout
    next_in_chain : ChainedStruct*
    type : BufferBindingType
    has_dynamic_offset : Bool
    min_binding_size : UInt64
  end
  struct BufferDescriptor
    next_in_chain : ChainedStruct*
    label : UInt8*
    usage : BufferUsageFlags
    size : UInt64
    mapped_at_creation : Bool
  end
  struct Color
    r : Float64
    g : Float64
    b : Float64
    a : Float64
  end
  struct CommandBufferDescriptor
    next_in_chain : ChainedStruct*
    label : UInt8*
  end
  struct CommandEncoderDescriptor
    next_in_chain : ChainedStruct*
    label : UInt8*
  end
  struct ComputePassDescriptor
    next_in_chain : ChainedStruct*
    label : UInt8*
  end
  struct DeviceDescriptor
    next_in_chain : ChainedStruct*
  end
  struct Extent3D
    width : UInt32
    height : UInt32
    depth : UInt32
  end
  struct InstanceDescriptor
    next_in_chain : ChainedStruct*
  end
  struct MultisampleState
    next_in_chain : ChainedStruct*
    count : UInt32
    mask : UInt32
    alpha_to_coverage_enabled : Bool
  end
  struct Origin3D
    x : UInt32
    y : UInt32
    z : UInt32
  end
  struct PipelineLayoutDescriptor
    next_in_chain : ChainedStruct*
    label : UInt8*
    bind_group_layout_count : UInt32
    bind_group_layouts : BindGroupLayout*
  end
  struct PrimitiveState
    next_in_chain : ChainedStruct*
    topology : PrimitiveTopology
    strip_index_format : IndexFormat
    front_face : FrontFace
    cull_mode : CullMode
  end
  struct ProgrammableStageDescriptor
    next_in_chain : ChainedStruct*
    module : ShaderModule
    entry_point : UInt8*
  end
  struct QuerySetDescriptor
    next_in_chain : ChainedStruct*
    label : UInt8*
    type : QueryType
    count : UInt32
    pipeline_statistics : PipelineStatisticName*
    pipeline_statistics_count : UInt32
  end
  struct RenderBundleDescriptor
    next_in_chain : ChainedStruct*
    label : UInt8*
  end
  struct RenderBundleEncoderDescriptor
    next_in_chain : ChainedStruct*
    label : UInt8*
    color_formats_count : UInt32
    color_formats : TextureFormat*
    depth_stencil_format : TextureFormat
    sample_count : UInt32
  end
  struct RenderPassDepthStencilAttachmentDescriptor
    attachment : TextureView
    depth_load_op : LoadOp
    depth_store_op : StoreOp
    clear_depth : Float32
    depth_read_only : Bool
    stencil_load_op : LoadOp
    stencil_store_op : StoreOp
    clear_stencil : UInt32
    stencil_read_only : Bool
  end
  struct RequestAdapterOptions
    next_in_chain : ChainedStruct*
    compatible_surface : Surface
  end
  struct SamplerBindingLayout
    next_in_chain : ChainedStruct*
    type : SamplerBindingType
  end
  struct SamplerDescriptor
    next_in_chain : ChainedStruct*
    label : UInt8*
    address_mode_u : AddressMode
    address_mode_v : AddressMode
    address_mode_w : AddressMode
    mag_filter : FilterMode
    min_filter : FilterMode
    mipmap_filter : FilterMode
    lod_min_clamp : Float32
    lod_max_clamp : Float32
    compare : CompareFunction
    max_anisotropy : UInt16
  end
  struct ShaderModuleDescriptor
    next_in_chain : ChainedStruct*
    label : UInt8*
  end
  struct ShaderModuleSPIRVDescriptor
    chain : ChainedStruct
    code_size : UInt32
    code : UInt32*
  end
  struct ShaderModuleWGSLDescriptor
    chain : ChainedStruct
    source : UInt8*
  end
  struct StencilFaceState
    compare : CompareFunction
    fail_op : StencilOperation
    depth_fail_op : StencilOperation
    pass_op : StencilOperation
  end
  struct StorageTextureBindingLayout
    next_in_chain : ChainedStruct*
    access : StorageTextureAccess
    format : TextureFormat
    view_dimension : TextureViewDimension
  end
  struct SurfaceDescriptor
    next_in_chain : ChainedStruct*
    label : UInt8*
  end
  struct SurfaceDescriptorFromCanvasHTMLSelector
    chain : ChainedStruct
    selector : UInt8*
  end
  struct SurfaceDescriptorFromMetalLayer
    chain : ChainedStruct
    layer : Void*
  end
  struct SurfaceDescriptorFromWindowsHWND
    chain : ChainedStruct
    hinstance : Void*
    hwnd : Void*
  end
  struct SurfaceDescriptorFromXlib
    chain : ChainedStruct
    display : Void*
    window : UInt32
  end
  struct SwapChainDescriptor
    next_in_chain : ChainedStruct*
    label : UInt8*
    usage : TextureUsageFlags
    format : TextureFormat
    width : UInt32
    height : UInt32
    present_mode : PresentMode
  end
  struct TextureBindingLayout
    next_in_chain : ChainedStruct*
    sample_type : TextureSampleType
    view_dimension : TextureViewDimension
    multisampled : Bool
  end
  struct TextureDataLayout
    next_in_chain : ChainedStruct*
    offset : UInt64
    bytes_per_row : UInt32
    rows_per_image : UInt32
  end
  struct TextureViewDescriptor
    next_in_chain : ChainedStruct*
    label : UInt8*
    format : TextureFormat
    dimension : TextureViewDimension
    base_mip_level : UInt32
    mip_level_count : UInt32
    base_array_layer : UInt32
    array_layer_count : UInt32
    aspect : TextureAspect
  end
  struct VertexAttribute
    format : VertexFormat
    offset : UInt64
    shader_location : UInt32
  end
  struct BindGroupDescriptor
    next_in_chain : ChainedStruct*
    label : UInt8*
    layout : BindGroupLayout
    entry_count : UInt32
    entries : BindGroupEntry*
  end
  struct BindGroupLayoutEntry
    next_in_chain : ChainedStruct*
    binding : UInt32
    visibility : ShaderStageFlags
    buffer : BufferBindingLayout
    sampler : SamplerBindingLayout
    texture : TextureBindingLayout
    storage_texture : StorageTextureBindingLayout
  end
  struct BlendState
    color : BlendComponent
    alpha : BlendComponent
  end
  struct ComputePipelineDescriptor
    next_in_chain : ChainedStruct*
    label : UInt8*
    layout : PipelineLayout
    compute_stage : ProgrammableStageDescriptor
  end
  struct DepthStencilState
    next_in_chain : ChainedStruct*
    format : TextureFormat
    depth_write_enabled : Bool
    depth_compare : CompareFunction
    stencil_front : StencilFaceState
    stencil_back : StencilFaceState
    stencil_read_mask : UInt32
    stencil_write_mask : UInt32
    depth_bias : Int32
    depth_bias_slope_scale : Float32
    depth_bias_clamp : Float32
  end
  struct ImageCopyBuffer
    next_in_chain : ChainedStruct*
    layout : TextureDataLayout
    buffer : Buffer
  end
  struct ImageCopyTexture
    next_in_chain : ChainedStruct*
    texture : Texture
    mip_level : UInt32
    origin : Origin3D
    aspect : TextureAspect
  end
  struct RenderPassColorAttachmentDescriptor
    attachment : TextureView
    resolve_target : TextureView
    load_op : LoadOp
    store_op : StoreOp
    clear_color : Color
  end
  struct TextureDescriptor
    next_in_chain : ChainedStruct*
    label : UInt8*
    usage : TextureUsageFlags
    dimension : TextureDimension
    size : Extent3D
    format : TextureFormat
    mip_level_count : UInt32
    sample_count : UInt32
  end
  struct VertexBufferLayout
    array_stride : UInt64
    step_mode : InputStepMode
    attribute_count : UInt32
    attributes : VertexAttribute*
  end
  struct BindGroupLayoutDescriptor
    next_in_chain : ChainedStruct*
    label : UInt8*
    entry_count : UInt32
    entries : BindGroupLayoutEntry*
  end
  struct ColorTargetState
    next_in_chain : ChainedStruct*
    format : TextureFormat
    blend : BlendState*
    write_mask : ColorWriteMaskFlags
  end
  struct RenderPassDescriptor
    next_in_chain : ChainedStruct*
    label : UInt8*
    color_attachment_count : UInt32
    color_attachments : RenderPassColorAttachmentDescriptor*
    depth_stencil_attachment : RenderPassDepthStencilAttachmentDescriptor*
    occlusion_query_set : QuerySet
  end
  struct VertexState
    next_in_chain : ChainedStruct*
    shader : ShaderModule
    entry_point : UInt8*
    buffer_count : UInt32
    buffers : VertexBufferLayout*
  end
  struct FragmentState
    next_in_chain : ChainedStruct*
    shader : ShaderModule
    entry_point : UInt8*
    target_count : UInt32
    targets : ColorTargetState*
  end
  struct RenderPipelineDescriptor
    next_in_chain : ChainedStruct*
    label : UInt8*
    layout : PipelineLayout
    vertex : VertexState
    primitive : PrimitiveState
    depth_stencil : DepthStencilState*
    multisample : MultisampleState
    fragment : FragmentState*
  end
  alias BufferMapCallback = (BufferMapAsyncStatus, Void*) -> Void
  alias CreateComputePipelineAsyncCallback = (CreatePipelineAsyncStatus, ComputePipeline, UInt8*, Void*) -> Void
  alias CreateRenderPipelineAsyncCallback = (CreatePipelineAsyncStatus, RenderPipeline, UInt8*, Void*) -> Void
  alias DeviceLostCallback = (UInt8*, Void*) -> Void
  alias ErrorCallback = (ErrorType, UInt8*, Void*) -> Void
  alias QueueWorkDoneCallback = (QueueWorkDoneStatus, Void*) -> Void
  alias RequestAdapterCallback = (Adapter, Void*) -> Void
  alias RequestDeviceCallback = (Device, Void*) -> Void
  alias SurfaceGetPreferredFormatCallback = (TextureFormat, Void*) -> Void
  alias ProcCreateInstance = (InstanceDescriptor*) -> Instance
  # See `wgpuGetProcAddress`
  # alias ProcGetProcAddress = (Device, UInt8*) -> () -> Void*
  alias ProcAdapterGetProperties = (Adapter, AdapterProperties*) -> Void
  alias ProcAdapterRequestDevice = (Adapter, DeviceDescriptor*, RequestDeviceCallback, Void*) -> Void
  alias ProcBufferDestroy = (Buffer) -> Void*
  alias ProcBufferGetConstMappedRange = (Buffer, LibC::SizeT, LibC::SizeT) -> Void
  alias ProcBufferGetMappedRange = (Buffer, LibC::SizeT, LibC::SizeT) -> Void
  alias ProcBufferMapAsync = (Buffer, MapModeFlags, LibC::SizeT, LibC::SizeT, BufferMapCallback, Void*) -> Void
  alias ProcBufferUnmap = (Buffer) -> Void*
  alias ProcCommandEncoderBeginComputePass = (CommandEncoder, ComputePassDescriptor*) -> ComputePassEncoder
  alias ProcCommandEncoderBeginRenderPass = (CommandEncoder, RenderPassDescriptor*) -> RenderPassEncoder
  alias ProcCommandEncoderCopyBufferToBuffer = (CommandEncoder, Buffer, UInt64, Buffer, UInt64, UInt64) -> Void
  alias ProcCommandEncoderCopyBufferToTexture = (CommandEncoder, ImageCopyBuffer*, ImageCopyTexture*, Extent3D*) -> Void
  alias ProcCommandEncoderCopyTextureToBuffer = (CommandEncoder, ImageCopyTexture*, ImageCopyBuffer*, Extent3D*) -> Void
  alias ProcCommandEncoderCopyTextureToTexture = (CommandEncoder, ImageCopyTexture*, ImageCopyTexture*, Extent3D*) -> Void
  alias ProcCommandEncoderFinish = (CommandEncoder, CommandBufferDescriptor*) -> CommandBuffer
  alias ProcCommandEncoderInsertDebugMarker = (CommandEncoder, UInt8*) -> Void
  alias ProcCommandEncoderPopDebugGroup = (CommandEncoder) -> Void*
  alias ProcCommandEncoderPushDebugGroup = (CommandEncoder, UInt8*) -> Void
  alias ProcCommandEncoderResolveQuerySet = (CommandEncoder, QuerySet, UInt32, UInt32, Buffer, UInt64) -> Void
  alias ProcCommandEncoderWriteTimestamp = (CommandEncoder, QuerySet, UInt32) -> Void
  alias ProcComputePassEncoderBeginPipelineStatisticsQuery = (ComputePassEncoder, QuerySet, UInt32) -> Void
  alias ProcComputePassEncoderDispatch = (ComputePassEncoder, UInt32, UInt32, UInt32) -> Void
  alias ProcComputePassEncoderDispatchIndirect = (ComputePassEncoder, Buffer, UInt64) -> Void
  alias ProcComputePassEncoderEndPass = (ComputePassEncoder) -> Void*
  alias ProcComputePassEncoderEndPipelineStatisticsQuery = (ComputePassEncoder) -> Void*
  alias ProcComputePassEncoderInsertDebugMarker = (ComputePassEncoder, UInt8*) -> Void
  alias ProcComputePassEncoderPopDebugGroup = (ComputePassEncoder) -> Void*
  alias ProcComputePassEncoderPushDebugGroup = (ComputePassEncoder, UInt8*) -> Void
  alias ProcComputePassEncoderSetBindGroup = (ComputePassEncoder, UInt32, BindGroup, UInt32, UInt32*) -> Void
  alias ProcComputePassEncoderSetPipeline = (ComputePassEncoder, ComputePipeline) -> Void
  alias ProcComputePassEncoderWriteTimestamp = (ComputePassEncoder, QuerySet, UInt32) -> Void
  alias ProcComputePipelineGetBindGroupLayout = (ComputePipeline, UInt32) -> BindGroupLayout
  alias ProcDeviceCreateBindGroup = (Device, BindGroupDescriptor*) -> BindGroup
  alias ProcDeviceCreateBindGroupLayout = (Device, BindGroupLayoutDescriptor*) -> BindGroupLayout
  alias ProcDeviceCreateBuffer = (Device, BufferDescriptor*) -> Buffer
  alias ProcDeviceCreateCommandEncoder = (Device, CommandEncoderDescriptor*) -> CommandEncoder
  alias ProcDeviceCreateComputePipeline = (Device, ComputePipelineDescriptor*) -> ComputePipeline
  alias ProcDeviceCreateComputePipelineAsync = (Device, ComputePipelineDescriptor*, CreateComputePipelineAsyncCallback, Void*) -> Void
  alias ProcDeviceCreatePipelineLayout = (Device, PipelineLayoutDescriptor*) -> PipelineLayout
  alias ProcDeviceCreateQuerySet = (Device, QuerySetDescriptor*) -> QuerySet
  alias ProcDeviceCreateRenderBundleEncoder = (Device, RenderBundleEncoderDescriptor*) -> RenderBundleEncoder
  alias ProcDeviceCreateRenderPipeline = (Device, RenderPipelineDescriptor*) -> RenderPipeline
  alias ProcDeviceCreateRenderPipelineAsync = (Device, RenderPipelineDescriptor*, CreateRenderPipelineAsyncCallback, Void*) -> Void
  alias ProcDeviceCreateSampler = (Device, SamplerDescriptor*) -> Sampler
  alias ProcDeviceCreateShaderModule = (Device, ShaderModuleDescriptor*) -> ShaderModule
  alias ProcDeviceCreateSwapChain = (Device, Surface, SwapChainDescriptor*) -> SwapChain
  alias ProcDeviceCreateTexture = (Device, TextureDescriptor*) -> Texture
  alias ProcDeviceGetQueue = (Device) -> Queue
  alias ProcDevicePopErrorScope = (Device, ErrorCallback, Void*) -> Void
  alias ProcDevicePushErrorScope = (Device, ErrorFilter) -> Void
  alias ProcDeviceSetDeviceLostCallback = (Device, DeviceLostCallback, Void*) -> Void
  alias ProcDeviceSetUncapturedErrorCallback = (Device, ErrorCallback, Void*) -> Void
  alias ProcInstanceCreateSurface = (Instance, SurfaceDescriptor*) -> Surface
  alias ProcInstanceProcessEvents = (Instance) -> Void*
  alias ProcInstanceRequestAdapter = (Instance, RequestAdapterOptions*, RequestAdapterCallback, Void*) -> Void
  alias ProcQuerySetDestroy = (QuerySet) -> Void*
  alias ProcQueueOnSubmittedWorkDone = (Queue, UInt64, QueueWorkDoneCallback, Void*) -> Void
  alias ProcQueueSubmit = (Queue, UInt32, CommandBuffer*) -> Void
  alias ProcQueueWriteBuffer = (Queue, Buffer, UInt64, Void*, LibC::SizeT) -> Void
  alias ProcQueueWriteTexture = (Queue, ImageCopyTexture*, Void*, LibC::SizeT, TextureDataLayout*, Extent3D*) -> Void
  alias ProcRenderBundleEncoderDraw = (RenderBundleEncoder, UInt32, UInt32, UInt32, UInt32) -> Void
  alias ProcRenderBundleEncoderDrawIndexed = (RenderBundleEncoder, UInt32, UInt32, UInt32, Int32, UInt32) -> Void
  alias ProcRenderBundleEncoderDrawIndexedIndirect = (RenderBundleEncoder, Buffer, UInt64) -> Void
  alias ProcRenderBundleEncoderDrawIndirect = (RenderBundleEncoder, Buffer, UInt64) -> Void
  alias ProcRenderBundleEncoderFinish = (RenderBundleEncoder, RenderBundleDescriptor*) -> RenderBundle
  alias ProcRenderBundleEncoderInsertDebugMarker = (RenderBundleEncoder, UInt8*) -> Void
  alias ProcRenderBundleEncoderPopDebugGroup = (RenderBundleEncoder) -> Void*
  alias ProcRenderBundleEncoderPushDebugGroup = (RenderBundleEncoder, UInt8*) -> Void
  alias ProcRenderBundleEncoderSetBindGroup = (RenderBundleEncoder, UInt32, BindGroup, UInt32, UInt32*) -> Void
  alias ProcRenderBundleEncoderSetIndexBuffer = (RenderBundleEncoder, Buffer, IndexFormat, UInt64, UInt64) -> Void
  alias ProcRenderBundleEncoderSetPipeline = (RenderBundleEncoder, RenderPipeline) -> Void
  alias ProcRenderBundleEncoderSetVertexBuffer = (RenderBundleEncoder, UInt32, Buffer, UInt64, UInt64) -> Void
  alias ProcRenderPassEncoderBeginOcclusionQuery = (RenderPassEncoder, UInt32) -> Void
  alias ProcRenderPassEncoderBeginPipelineStatisticsQuery = (RenderPassEncoder, QuerySet, UInt32) -> Void
  alias ProcRenderPassEncoderDraw = (RenderPassEncoder, UInt32, UInt32, UInt32, UInt32) -> Void
  alias ProcRenderPassEncoderDrawIndexed = (RenderPassEncoder, UInt32, UInt32, UInt32, Int32, UInt32) -> Void
  alias ProcRenderPassEncoderDrawIndexedIndirect = (RenderPassEncoder, Buffer, UInt64) -> Void
  alias ProcRenderPassEncoderDrawIndirect = (RenderPassEncoder, Buffer, UInt64) -> Void
  alias ProcRenderPassEncoderEndOcclusionQuery = (RenderPassEncoder) -> Void*
  alias ProcRenderPassEncoderEndPass = (RenderPassEncoder) -> Void*
  alias ProcRenderPassEncoderEndPipelineStatisticsQuery = (RenderPassEncoder) -> Void*
  alias ProcRenderPassEncoderExecuteBundles = (RenderPassEncoder, UInt32, RenderBundle*) -> Void
  alias ProcRenderPassEncoderInsertDebugMarker = (RenderPassEncoder, UInt8*) -> Void
  alias ProcRenderPassEncoderPopDebugGroup = (RenderPassEncoder) -> Void*
  alias ProcRenderPassEncoderPushDebugGroup = (RenderPassEncoder, UInt8*) -> Void
  alias ProcRenderPassEncoderSetBindGroup = (RenderPassEncoder, UInt32, BindGroup, UInt32, UInt32*) -> Void
  alias ProcRenderPassEncoderSetBlendColor = (RenderPassEncoder, Color*) -> Void
  alias ProcRenderPassEncoderSetIndexBuffer = (RenderPassEncoder, Buffer, IndexFormat, UInt64, UInt64) -> Void
  alias ProcRenderPassEncoderSetPipeline = (RenderPassEncoder, RenderPipeline) -> Void
  alias ProcRenderPassEncoderSetScissorRect = (RenderPassEncoder, UInt32, UInt32, UInt32, UInt32) -> Void
  alias ProcRenderPassEncoderSetStencilReference = (RenderPassEncoder, UInt32) -> Void
  alias ProcRenderPassEncoderSetVertexBuffer = (RenderPassEncoder, UInt32, Buffer, UInt64, UInt64) -> Void
  alias ProcRenderPassEncoderSetViewport = (RenderPassEncoder, Float32, Float32, Float32, Float32, Float32, Float32) -> Void
  alias ProcRenderPassEncoderWriteTimestamp = (RenderPassEncoder, QuerySet, UInt32) -> Void
  alias ProcRenderPipelineGetBindGroupLayout = (RenderPipeline, UInt32) -> BindGroupLayout
  alias ProcSurfaceGetPreferredFormat = (Surface, Adapter, SurfaceGetPreferredFormatCallback, Void*) -> Void
  alias ProcSwapChainGetCurrentTextureView = (SwapChain) -> TextureView
  alias ProcSwapChainPresent = (SwapChain) -> Void*
  alias ProcTextureCreateView = (Texture, TextureViewDescriptor*) -> TextureView
  alias ProcTextureDestroy = (Texture) -> Void*
  fun create_instance = wgpuCreateInstance(InstanceDescriptor*) : Instance
  fun get_proc_address = wgpuGetProcAddress(Device, UInt8*) : Proc(Void*)
  fun adapter_get_properties = wgpuAdapterGetProperties(Adapter, AdapterProperties*) : Void
  fun adapter_request_device = wgpuAdapterRequestDevice(Adapter, DeviceDescriptor*, RequestDeviceCallback, Void*) : Void
  fun buffer_destroy = wgpuBufferDestroy(Buffer) : Void
  fun buffer_get_const_mapped_range = wgpuBufferGetConstMappedRange(Buffer, LibC::SizeT, LibC::SizeT) : Void*
  fun buffer_get_mapped_range = wgpuBufferGetMappedRange(Buffer, LibC::SizeT, LibC::SizeT) : Void*
  fun buffer_map_async = wgpuBufferMapAsync(Buffer, MapModeFlags, LibC::SizeT, LibC::SizeT, BufferMapCallback, Void*) : Void
  fun buffer_unmap = wgpuBufferUnmap(Buffer) : Void
  fun command_encoder_begin_compute_pass = wgpuCommandEncoderBeginComputePass(CommandEncoder, ComputePassDescriptor*) : ComputePassEncoder
  fun command_encoder_begin_render_pass = wgpuCommandEncoderBeginRenderPass(CommandEncoder, RenderPassDescriptor*) : RenderPassEncoder
  fun command_encoder_copy_buffer_to_buffer = wgpuCommandEncoderCopyBufferToBuffer(CommandEncoder, Buffer, UInt64, Buffer, UInt64, UInt64) : Void
  fun command_encoder_copy_buffer_to_texture = wgpuCommandEncoderCopyBufferToTexture(CommandEncoder, ImageCopyBuffer*, ImageCopyTexture*, Extent3D*) : Void
  fun command_encoder_copy_texture_to_buffer = wgpuCommandEncoderCopyTextureToBuffer(CommandEncoder, ImageCopyTexture*, ImageCopyBuffer*, Extent3D*) : Void
  fun command_encoder_copy_texture_to_texture = wgpuCommandEncoderCopyTextureToTexture(CommandEncoder, ImageCopyTexture*, ImageCopyTexture*, Extent3D*) : Void
  fun command_encoder_finish = wgpuCommandEncoderFinish(CommandEncoder, CommandBufferDescriptor*) : CommandBuffer
  fun command_encoder_insert_debug_marker = wgpuCommandEncoderInsertDebugMarker(CommandEncoder, UInt8*) : Void
  fun command_encoder_pop_debug_group = wgpuCommandEncoderPopDebugGroup(CommandEncoder) : Void
  fun command_encoder_push_debug_group = wgpuCommandEncoderPushDebugGroup(CommandEncoder, UInt8*) : Void
  fun command_encoder_resolve_query_set = wgpuCommandEncoderResolveQuerySet(CommandEncoder, QuerySet, UInt32, UInt32, Buffer, UInt64) : Void
  fun command_encoder_write_timestamp = wgpuCommandEncoderWriteTimestamp(CommandEncoder, QuerySet, UInt32) : Void
  fun compute_pass_encoder_begin_pipeline_statistics_query = wgpuComputePassEncoderBeginPipelineStatisticsQuery(ComputePassEncoder, QuerySet, UInt32) : Void
  fun compute_pass_encoder_dispatch = wgpuComputePassEncoderDispatch(ComputePassEncoder, UInt32, UInt32, UInt32) : Void
  fun compute_pass_encoder_dispatch_indirect = wgpuComputePassEncoderDispatchIndirect(ComputePassEncoder, Buffer, UInt64) : Void
  fun compute_pass_encoder_end_pass = wgpuComputePassEncoderEndPass(ComputePassEncoder) : Void
  fun compute_pass_encoder_end_pipeline_statistics_query = wgpuComputePassEncoderEndPipelineStatisticsQuery(ComputePassEncoder) : Void
  fun compute_pass_encoder_insert_debug_marker = wgpuComputePassEncoderInsertDebugMarker(ComputePassEncoder, UInt8*) : Void
  fun compute_pass_encoder_pop_debug_group = wgpuComputePassEncoderPopDebugGroup(ComputePassEncoder) : Void
  fun compute_pass_encoder_push_debug_group = wgpuComputePassEncoderPushDebugGroup(ComputePassEncoder, UInt8*) : Void
  fun compute_pass_encoder_set_bind_group = wgpuComputePassEncoderSetBindGroup(ComputePassEncoder, UInt32, BindGroup, UInt32, UInt32*) : Void
  fun compute_pass_encoder_set_pipeline = wgpuComputePassEncoderSetPipeline(ComputePassEncoder, ComputePipeline) : Void
  fun compute_pass_encoder_write_timestamp = wgpuComputePassEncoderWriteTimestamp(ComputePassEncoder, QuerySet, UInt32) : Void
  fun compute_pipeline_get_bind_group_layout = wgpuComputePipelineGetBindGroupLayout(ComputePipeline, UInt32) : BindGroupLayout
  fun device_create_bind_group = wgpuDeviceCreateBindGroup(Device, BindGroupDescriptor*) : BindGroup
  fun device_create_bind_group_layout = wgpuDeviceCreateBindGroupLayout(Device, BindGroupLayoutDescriptor*) : BindGroupLayout
  fun device_create_buffer = wgpuDeviceCreateBuffer(Device, BufferDescriptor*) : Buffer
  fun device_create_command_encoder = wgpuDeviceCreateCommandEncoder(Device, CommandEncoderDescriptor*) : CommandEncoder
  fun device_create_compute_pipeline = wgpuDeviceCreateComputePipeline(Device, ComputePipelineDescriptor*) : ComputePipeline
  fun device_create_compute_pipeline_async = wgpuDeviceCreateComputePipelineAsync(Device, ComputePipelineDescriptor*, CreateComputePipelineAsyncCallback, Void*) : Void
  fun device_create_pipeline_layout = wgpuDeviceCreatePipelineLayout(Device, PipelineLayoutDescriptor*) : PipelineLayout
  fun device_create_query_set = wgpuDeviceCreateQuerySet(Device, QuerySetDescriptor*) : QuerySet
  fun device_create_render_bundle_encoder = wgpuDeviceCreateRenderBundleEncoder(Device, RenderBundleEncoderDescriptor*) : RenderBundleEncoder
  fun device_create_render_pipeline = wgpuDeviceCreateRenderPipeline(Device, RenderPipelineDescriptor*) : RenderPipeline
  fun device_create_render_pipeline_async = wgpuDeviceCreateRenderPipelineAsync(Device, RenderPipelineDescriptor*, CreateRenderPipelineAsyncCallback, Void*) : Void
  fun device_create_sampler = wgpuDeviceCreateSampler(Device, SamplerDescriptor*) : Sampler
  fun device_create_shader_module = wgpuDeviceCreateShaderModule(Device, ShaderModuleDescriptor*) : ShaderModule
  fun device_create_swap_chain = wgpuDeviceCreateSwapChain(Device, Surface, SwapChainDescriptor*) : SwapChain
  fun device_create_texture = wgpuDeviceCreateTexture(Device, TextureDescriptor*) : Texture
  fun device_get_queue = wgpuDeviceGetQueue(Device) : Queue
  fun device_pop_error_scope = wgpuDevicePopErrorScope(Device, ErrorCallback, Void*) : Bool
  fun device_push_error_scope = wgpuDevicePushErrorScope(Device, ErrorFilter) : Void
  fun device_set_device_lost_callback = wgpuDeviceSetDeviceLostCallback(Device, DeviceLostCallback, Void*) : Void
  fun device_set_uncaptured_error_callback = wgpuDeviceSetUncapturedErrorCallback(Device, ErrorCallback, Void*) : Void
  fun instance_create_surface = wgpuInstanceCreateSurface(Instance, SurfaceDescriptor*) : Surface
  fun instance_process_events = wgpuInstanceProcessEvents(Instance) : Void
  fun instance_request_adapter = wgpuInstanceRequestAdapter(Instance, RequestAdapterOptions*, RequestAdapterCallback, Void*) : Void
  fun query_set_destroy = wgpuQuerySetDestroy(QuerySet) : Void
  fun queue_on_submitted_work_done = wgpuQueueOnSubmittedWorkDone(Queue, UInt64, QueueWorkDoneCallback, Void*) : Void
  fun queue_submit = wgpuQueueSubmit(Queue, UInt32, CommandBuffer*) : Void
  fun queue_write_buffer = wgpuQueueWriteBuffer(Queue, Buffer, UInt64, Void*, LibC::SizeT) : Void
  fun queue_write_texture = wgpuQueueWriteTexture(Queue, ImageCopyTexture*, Void*, LibC::SizeT, TextureDataLayout*, Extent3D*) : Void
  fun render_bundle_encoder_draw = wgpuRenderBundleEncoderDraw(RenderBundleEncoder, UInt32, UInt32, UInt32, UInt32) : Void
  fun render_bundle_encoder_draw_indexed = wgpuRenderBundleEncoderDrawIndexed(RenderBundleEncoder, UInt32, UInt32, UInt32, Int32, UInt32) : Void
  fun render_bundle_encoder_draw_indexed_indirect = wgpuRenderBundleEncoderDrawIndexedIndirect(RenderBundleEncoder, Buffer, UInt64) : Void
  fun render_bundle_encoder_draw_indirect = wgpuRenderBundleEncoderDrawIndirect(RenderBundleEncoder, Buffer, UInt64) : Void
  fun render_bundle_encoder_finish = wgpuRenderBundleEncoderFinish(RenderBundleEncoder, RenderBundleDescriptor*) : RenderBundle
  fun render_bundle_encoder_insert_debug_marker = wgpuRenderBundleEncoderInsertDebugMarker(RenderBundleEncoder, UInt8*) : Void
  fun render_bundle_encoder_pop_debug_group = wgpuRenderBundleEncoderPopDebugGroup(RenderBundleEncoder) : Void
  fun render_bundle_encoder_push_debug_group = wgpuRenderBundleEncoderPushDebugGroup(RenderBundleEncoder, UInt8*) : Void
  fun render_bundle_encoder_set_bind_group = wgpuRenderBundleEncoderSetBindGroup(RenderBundleEncoder, UInt32, BindGroup, UInt32, UInt32*) : Void
  fun render_bundle_encoder_set_index_buffer = wgpuRenderBundleEncoderSetIndexBuffer(RenderBundleEncoder, Buffer, IndexFormat, UInt64, UInt64) : Void
  fun render_bundle_encoder_set_pipeline = wgpuRenderBundleEncoderSetPipeline(RenderBundleEncoder, RenderPipeline) : Void
  fun render_bundle_encoder_set_vertex_buffer = wgpuRenderBundleEncoderSetVertexBuffer(RenderBundleEncoder, UInt32, Buffer, UInt64, UInt64) : Void
  fun render_pass_encoder_begin_occlusion_query = wgpuRenderPassEncoderBeginOcclusionQuery(RenderPassEncoder, UInt32) : Void
  fun render_pass_encoder_begin_pipeline_statistics_query = wgpuRenderPassEncoderBeginPipelineStatisticsQuery(RenderPassEncoder, QuerySet, UInt32) : Void
  fun render_pass_encoder_draw = wgpuRenderPassEncoderDraw(RenderPassEncoder, UInt32, UInt32, UInt32, UInt32) : Void
  fun render_pass_encoder_draw_indexed = wgpuRenderPassEncoderDrawIndexed(RenderPassEncoder, UInt32, UInt32, UInt32, Int32, UInt32) : Void
  fun render_pass_encoder_draw_indexed_indirect = wgpuRenderPassEncoderDrawIndexedIndirect(RenderPassEncoder, Buffer, UInt64) : Void
  fun render_pass_encoder_draw_indirect = wgpuRenderPassEncoderDrawIndirect(RenderPassEncoder, Buffer, UInt64) : Void
  fun render_pass_encoder_end_occlusion_query = wgpuRenderPassEncoderEndOcclusionQuery(RenderPassEncoder) : Void
  fun render_pass_encoder_end_pass = wgpuRenderPassEncoderEndPass(RenderPassEncoder) : Void
  fun render_pass_encoder_end_pipeline_statistics_query = wgpuRenderPassEncoderEndPipelineStatisticsQuery(RenderPassEncoder) : Void
  fun render_pass_encoder_execute_bundles = wgpuRenderPassEncoderExecuteBundles(RenderPassEncoder, UInt32, RenderBundle*) : Void
  fun render_pass_encoder_insert_debug_marker = wgpuRenderPassEncoderInsertDebugMarker(RenderPassEncoder, UInt8*) : Void
  fun render_pass_encoder_pop_debug_group = wgpuRenderPassEncoderPopDebugGroup(RenderPassEncoder) : Void
  fun render_pass_encoder_push_debug_group = wgpuRenderPassEncoderPushDebugGroup(RenderPassEncoder, UInt8*) : Void
  fun render_pass_encoder_set_bind_group = wgpuRenderPassEncoderSetBindGroup(RenderPassEncoder, UInt32, BindGroup, UInt32, UInt32*) : Void
  fun render_pass_encoder_set_blend_color = wgpuRenderPassEncoderSetBlendConstant(RenderPassEncoder, Color*) : Void
  fun render_pass_encoder_set_index_buffer = wgpuRenderPassEncoderSetIndexBuffer(RenderPassEncoder, Buffer, IndexFormat, UInt64, UInt64) : Void
  fun render_pass_encoder_set_pipeline = wgpuRenderPassEncoderSetPipeline(RenderPassEncoder, RenderPipeline) : Void
  fun render_pass_encoder_set_scissor_rect = wgpuRenderPassEncoderSetScissorRect(RenderPassEncoder, UInt32, UInt32, UInt32, UInt32) : Void
  fun render_pass_encoder_set_stencil_reference = wgpuRenderPassEncoderSetStencilReference(RenderPassEncoder, UInt32) : Void
  fun render_pass_encoder_set_vertex_buffer = wgpuRenderPassEncoderSetVertexBuffer(RenderPassEncoder, UInt32, Buffer, UInt64, UInt64) : Void
  fun render_pass_encoder_set_viewport = wgpuRenderPassEncoderSetViewport(RenderPassEncoder, Float32, Float32, Float32, Float32, Float32, Float32) : Void
  fun render_pass_encoder_write_timestamp = wgpuRenderPassEncoderWriteTimestamp(RenderPassEncoder, QuerySet, UInt32) : Void
  fun render_pipeline_get_bind_group_layout = wgpuRenderPipelineGetBindGroupLayout(RenderPipeline, UInt32) : BindGroupLayout
  fun surface_get_preferred_format = wgpuSurfaceGetPreferredFormat(Surface, Adapter, SurfaceGetPreferredFormatCallback, Void*) : Void
  fun swap_chain_get_current_texture_view = wgpuSwapChainGetCurrentTextureView(SwapChain) : TextureView
  fun swap_chain_present = wgpuSwapChainPresent(SwapChain) : Void
  fun texture_create_view = wgpuTextureCreateView(Texture, TextureViewDescriptor*) : TextureView
  fun texture_destroy = wgpuTextureDestroy(Texture) : Void

  # wgpu.h
  enum NativeSType : UInt32
    DeviceExtras = 1610612737
    Force32 = 2147483647
  end
  struct DeviceExtras
    chain : ChainedStruct
    max_bind_groups : UInt32
    label : UInt8*
    trace_path : UInt8*
  end
  enum LogLevel : UInt32
    Off = 0
    Error = 1
    Warn = 2
    Info = 3
    Debug = 4
    Trace = 5
    Force32 = 2147483647
  end
  alias LogCallback = (LogLevel, UInt8*) -> Void
  fun device_poll = wgpuDevicePoll(Device, Bool) : Void
  fun set_log_callback = wgpuSetLogCallback(LogCallback) : Void
  fun set_log_level = wgpuSetLogLevel(LogLevel) : Void
  fun get_version = wgpuGetVersion() : UInt32
  fun render_pass_encoder_set_push_constants = wgpuRenderPassEncoderSetPushConstants(RenderPassEncoder, ShaderStage, UInt32, UInt32, Void*) : Void
end
